Def AnyWall() Or { On "wood_wall" On "castle_wall" } End
Def AnyFloor() And { Not AnyWall() Or { On "stone_floor" On "wood_floor" On "floor" }} End
Def AnyDoor() Or { On "wood_door" On "iron_door" On "iron_gate" On "wood_gate" } End
Def AnyWater() Or { On "lava" On "water" } End

Def Building(WallType, FloorType) {
  Margins(1,
    Set { FloorType WallType },
    Reset { FloorType "clear_middle" }
  )
}
End

Def NextTo(Pred)
  Area { 1 Pred }
End

Def Connector()
  Connect(AnyFloor(), {
    1000 And { On "no_dig" } None
    10 And {On "wood_wall" Not On "no_dig"} { Remove { "wood_wall" } Set { "clear_middle" "wood_door" }}
    10 And {On "castle_wall" Not On "no_dig"} { Remove { "castle_wall" } Set { "clear_middle" "iron_door" }}
    8 On "lava" Set { "stone_bridge" }
    8 On "water" Set { "wood_bridge" }
    6 And { Not AnyWall() Not AnyWater() Not AnyFloor() Not On "no_dig" On "room_wall" }
        Filter(And { Chance 0.4 Not NextTo(On "wood_door")}, Reset {"wood_door"}, Reset {"floor"})
    4 And { Not AnyWall() Not AnyFloor() On "rock" Not On "no_dig" Not On "room_wall" } Reset {"floor"}
  })
End

Def Inside(Margin, Gen)
  Margins(Margin, None, Gen)
End

Def Border(Margin, Gen)
  Margins(Margin, Gen, None)
End

Def CellularAutomaton(Generator, BeginProb)
  Inside(1, {
    Filter(Chance BeginProb, Set { "cell_added" })
    Repeat(4, {
      Filter(Area { 1 On "cell_added" 5 }, Set { "cell_added2" })
      Filter(On "cell_added2", Set { "cell_added" }, Remove { "cell_added" })
      Remove { "cell_added2" }
    })
    Filter(On "cell_added", Generator)
    Remove { "cell_added" }
  })
End

Def Village1() {
  Place {
    {
      minSize = { 5 6 }
      maxSize = { 8 9 }
      generator = {
        Building("castle_wall", "stone_floor")
        Filter(AnyFloor(), Set { "main_building" })
      }
      position = MIDDLE
      minSpacing = 1
    }
    {
      minSize = {3 3}
      maxSize = {6 6}
      generator = Building("wood_wall", "floor")
      count = 3
      minSpacing = 1
    }
  }
  Connector()
  Place {
    { {1 1} Set { "bed" } {2 4} And {On "main_building" NextTo(AnyWall()) Not NextTo(AnyDoor()) } }
    { {1 1} Set { "stockpile" } {1 3} And {On "main_building" NextTo(AnyWall()) Not NextTo(AnyDoor()) } }
  }
  Place { { {1 1} Set { "dining_table" } 1 And {On "main_building" Not NextTo(AnyWall()) } } }
}
End

Def Village2() {
  Place {
    {
      size = {6 9}
      generator = {
        Building("castle_wall", "stone_floor")
        Inside(1, VRatio(0.6,
          Margin(BOTTOM, 1, Set { "castle_wall" }, Set { "first_room" }),
          Set { "second_room" }))
      }
      position = MIDDLE
      minSpacing = 1
    }
    {
      minSize = {4 4}
      maxSize = {6 6}
      generator = Building("wood_wall", "floor")
      count = 1
      minSpacing = 1
    }
  }
  Connector()
  Place {
    { {1 1} Set { "bed" } {2 4} And {On "first_room" NextTo(AnyWall()) Not NextTo(AnyDoor()) } }
    { {1 1} Set { "stockpile" } {1 3} And {On "first_room" NextTo(AnyWall()) Not NextTo(AnyDoor()) } }
  }
  Place { { {1 1} Set { "dining_table" } 1 And {On "second_room" Not NextTo(AnyWall()) } } }
}
End

"village" Choose {
  Village1()
  Village2()
}

"village1" Village1()
"village2" Village2()

Def CastleGate1() 
  Margin(TOP, 1, Place {{ {2 1} Reset { "floor" "iron_gate" } 1 True MIDDLE }}, None)
End

Def GatePlusWall(WallLength)
  Margin(LEFT, WallLength,
    Set {"castle_wall"},
    Margin(RIGHT, WallLength,
      Set {"castle_wall"},
      Reset { "floor" "iron_gate" }
    )
  )
End

Def CastleGate2() {
  Margin(TOP, -1, None, Margin(TOP, 1, Place {{ {4 1} GatePlusWall(1) 1 True MIDDLE }}, None))
  Margin(TOP, 1 Place {{ {2 1} Reset { "floor" } 1 True MIDDLE }}, None)
}
End

Def CastleGate3() {
  Margin(TOP, -1, None, Margin(TOP, 1, Place {{ {6 1} GatePlusWall(2) 1 True MIDDLE }}, None))
  Margin(TOP, 1, Place {{ {4 1} Reset { "floor" } 1 True MIDDLE }}, None)
}
End

Def CastleCorners(CornerSize) {
  Corners(Border(-1, Set {"castle_wall"}), CornerSize)
  Corners(Reset { "floor" "castle_corner" }, CornerSize)
  Inside(1, Corners(Choose { None Reset { "floor" }}, CornerSize))
}
End

Def CastleCornersOpen(CornerSize) {
  Corners(Border(-1, Set {"castle_wall"}), CornerSize)
  Corners(Reset { "floor" "castle_corner" }, CornerSize)
  Inside(1, Corners(Reset { "floor" }, CornerSize))
}
End

Def CastlePart1(Width) {
  VRatio(0.6, Margin(TOP, 1, None, Margin(BOTTOM, -1, None, {
    Margin(BOTTOM, 1, Set { "castle_wall" }, None)
    Place {{
        {Width 1}
        Margin(LEFT, 1,
          Reset { "castle_wall" },
          Margin(RIGHT, 1,
            Reset { "castle_wall" },
            Reset { "floor" })
        )
        1 True MIDDLE_V }
    }
  })), None)
}
End

Def CastlePart2(Width) {
  VRatio(0.6, None, {
    Margin(TOP, 1, Set { "castle_wall" }, None)
    Margin(TOP, 2,
      Margin(BOTTOM, -1, None,
        Place {{
          {Width 1}
          Margin(LEFT, 1
            Reset { "castle_wall" }
            Margin(RIGHT, 1,
              Reset { "castle_wall" },
              Reset { "floor" })
          )
        1 True MIDDLE_V }})
      Place {{
        {Width 1}
        Margin(LEFT, 1, None, Margin(RIGHT, 1, None
          Margin(LEFT, 1,
            Reset { "castle_wall" }
            Margin(RIGHT, 1,
              Reset { "castle_wall" },
              None)
          )
        ))
        1 True MIDDLE_V }
      }
    )
  })
}
End

Def CastlePart3(Width) {
  VRatio(0.6, None,
    Margin(TOP, 2, None,
      Place {{
        {Width 1}
        Margin(TOP, 1, {
            Set { "castle_wall" }
            Place {{ {2 1} Reset { "floor" "iron_gate" } 1 True MIDDLE }}
          },
          Margin(LEFT, 1,
            Reset { "castle_wall" },
            Margin(RIGHT, 1,
              Reset { "castle_wall" },
              None)))
        1 True MIDDLE_V }
      }
    )
  )
}
End

Def Maybe(Chance, Gen)
  Choose { Chance Gen None }
End

Def CastleMaybe(Gen) 
  Maybe(0.5, Gen)
End

Def Castle(CornerSize) {
  Inside(1, {
    Building("castle_wall", "floor")
    Choose { CastleGate3() CastleGate2() CastleGate1() }
    CastleCorners(CornerSize)
    Choose {
      { CastleMaybe(CastlePart1(8)) CastleMaybe(CastlePart2(8)) CastleMaybe(CastlePart3(6)) }
      { CastleMaybe(CastlePart1(6)) CastleMaybe(CastlePart2(6)) CastleMaybe(CastlePart3(4)) }
    }
    Connector()
    Place {{ {1 1} FloodFill(And { AnyFloor() Not AnyDoor() }, Set { "castle_outside" }) 1 True MIDDLE }}
    Filter(And { Or { AnyFloor() AnyDoor() } Not On "castle_outside"}, Set { "castle_inside" "stone_floor" })
    Place { {{1 1} Set {"inside_furniture"} 8 And { Not AnyDoor() On "castle_inside"} }}
    Place { {{1 1} Set {"outside_furniture"} 8 On "castle_outside"} }
    Margin(BOTTOM, 2, Margin(BOTTOM, 1, None,
        Place {{ {1 1} Set { "clear_middle" "up_stairs0" "stairs" } 1 True MIDDLE }}), None)
    Place {{ {1 1} Set { "clear_middle" "down_stairs0" "stairs" } 1 On "castle_corner" }}
    Place { {{2 2} Set {"shop0"} 1 And { On "castle_inside" Not On "stairs"} }}
  })
}
End

"castle" {
  Choose { Castle(2) Castle(3) }
  Filter(AnyFloor(), SetFront "clear_furniture")
}

Def CastleEmpty(CornerSize) {
  Inside(1, {
    Building("castle_wall", "floor")
    Choose { CastleGate3() CastleGate2() CastleGate1() }
    CastleCornersOpen(CornerSize)
    Place {{ {1 1} FloodFill(And { AnyFloor() Not AnyDoor() }, Set { "stone_floor" }) 1 True MIDDLE }}
    Margin(BOTTOM, 2, Margin(BOTTOM, 1, None,
        Place {{ {1 1} Set { "clear_middle" "up_stairs0" "stairs" } 1 True MIDDLE }}), None)
    Place {{ {1 1} Set { "clear_middle" "down_stairs0" "stairs" } 1 On "castle_corner" }}
    SetFront "clear_furniture"
  })
}
End

"castle_empty" Choose { CastleEmpty(2) CastleEmpty(3) }

Def PlaceGen(Gen, Size, Placement)
  Place {{Size Gen 1 True Placement }}
End


Def AdoxieFeetEntry() {
  Building("castle_wall", "stone_floor")
  Margin(BOTTOM, 2,
    Margin(TOP, 1,
      Place {{
        {3 1}
        {
          Reset { "stone_floor" }
          Margin(LEFT, 1,
            Set { "adoxie_right_foot" "no_corpse" }
            Margin(RIGHT, 1,
              Set { "adoxie_left_foot" "no_corpse"}
              None)
          )
        }
        1 True MIDDLE }
      }, None), None)
    {
      Margin(BOTTOM, 1,
        PlaceGen(Reset { "stone_floor" "iron_door" }, {1 1}, MIDDLE),
        None)
      Margin(TOP, 1,
        None,
        Margin(TOP, 1,
          PlaceGen(Set { "down_stairs0" "no_corpse"}, {1 1}, MIDDLE),
          None
        )
      )
    }
  Inside(1, Place {{{1 1} Set { "corpse" } {2 4} Not On "no_corpse"}})
}
End

"adoxie_feet_entry" AdoxieFeetEntry()

Def AdoxieFeetUnderRoom(EntrancePos)
{
  Reset { "floor" "stockpile" "adoxie_feet_trigger" }
  Border(-1, Set { "no_dig" })
  Inside(-1, PlaceGen(Remove { "no_dig" "rock" }, {1 1}, EntrancePos))
}
End

Def AdoxieFeetUnder() {
  Set { "rock" }
  Inside(1, Place {
    {
      {3 3}
      AdoxieFeetUnderRoom(BOTTOM_CENTER)
      1 True TOP_CENTER
    }
    {
      {3 3}
      AdoxieFeetUnderRoom(LEFT_CENTER)
      1 True RIGHT_CENTER
    }
    {
      {3 3}
      AdoxieFeetUnderRoom(RIGHT_CENTER)
      1 True LEFT_CENTER
    }
    {
      {1 1}
      Reset { "floor" "up_stairs0" }
      1 True BOTTOM_CENTER
    }
  })
  Connector()
}
End

"adoxie_feet_under" AdoxieFeetUnder()

Def CastleUpStairs() {
  Set { "floor" }
  Place {{
    {9 1}
    {
      Building("castle_wall", "stone_floor")
      Inside(1, Set { "no_territory" })
      Margin(TOP, 4, None, Margin(LEFT, 3, Margin(RIGHT, 1, Filter(YMod 2 0, Set { "castle_wall" }), None), None))
      Margin(TOP, 4, None, Margin(RIGHT, 3, Margin(LEFT, 1, Filter(YMod 2 0, Set { "castle_wall" }) None), None))
    } 
    1 True MIDDLE_V }
  }
  Margin(BOTTOM, 2, Margin(BOTTOM, 1, None,
     Place {{ {1 1} Set { "clear_middle" "down_stairs0" } 1 True MIDDLE }}), None)
  Margin(TOP, 3, Margin(TOP, 2, None
     Place {{ {1 1} Set { "clear_middle" "throne" } 1 True MIDDLE }}), None)
}
End

"castle_up_stairs" CastleUpStairs()

Def GuardPost() {
  Place {
    {
      size = {5 7}
      generator = {
        Building("castle_wall", "wood_floor")
        Inside(1, VRatio(0.6,
          Margin(BOTTOM, 1,
            {
              Set { "castle_wall" }
              Place { { {1 1} Set { "wood_door" } 1  } }
            },
            {
              Set { "first_room" }
              Border(-1, Set { "no_dig" })
            }
          ),
          Set { "second_room" }
        ))
      }
      position = MIDDLE
      minSpacing = 1
    }
    {
      minSize = {4 4}
      maxSize = {6 6}
      generator = Building("wood_wall", "floor")
      count = 1
      minSpacing = 1
    }
  }
  Place {
    {{1 1} Set {"up_stairs0"} 1 And { On "first_room" AnyFloor() }}
    {{1 1} Set {"dining_table"} 1 And { On "first_room" AnyFloor() }}
    {{1 1} Set {"torch"} 1 And { On "first_room" AnyFloor() }}
  }
  Connector()
}
End

Def GuardPostFloor2() {
  Building("castle_wall", "wood_floor")
  Place {
    {{1 1} Set {"down_stairs0"} 1 And { AnyFloor() NextTo(AnyWall())} }
    {{1 1} Set {"up_stairs0"} 1 And { AnyFloor() NextTo(AnyWall())} }
    {{1 1} Set {"armor_chest"} {3 6} And { AnyFloor() NextTo(AnyWall())} }
    {{1 1} Set {"bed"} 2 And { AnyFloor() NextTo(AnyWall())} }
    {{1 1} Set {"torch"} 1 And { AnyFloor() NextTo(AnyWall())} }
  }
}
End

Def GuardPostFloor3() {
  Building("wood_wall", "wood_floor")
  Place {
    {{1 1} Set {"down_stairs0"} 1 And { AnyFloor() NextTo(AnyWall())} }
    {{1 1} Set {"pamphlet_chest"} {2 4} And { AnyFloor() NextTo(AnyWall())} }
  }
}
End

"guard_post" GuardPost()
"guard_post_floor2" GuardPostFloor2()
"guard_post_floor3" GuardPostFloor3()

Def DungeonContent()
  Place {
    {
      size = {1 1}
      generator = Set {"monster"}
      count = 4
        predicate = On "room_floor"
    }
    {{1 1} Set {"up_stairs0"} 1 On "room_floor"}
    {{1 1} Set {"down_stairs0"} 1 On "room_floor"}
    {{1 1} Set {"up_stairs1"} 1 On "room_floor"}
    {{1 1} Set {"down_stairs1"} 1 On "room_floor"}
    {{1 1} Set {"inside_furniture"} 10 On "room_floor"}
  }
End

Def Corners(Generator, Size) {
  Margin(TOP, Size, {
    Margin(LEFT, Size, Generator, None)
    Margin(RIGHT, Size, Generator, None)
  }, None)
  Margin(BOTTOM, Size, {
    Margin(LEFT, Size, Generator, None)
    Margin(RIGHT, Size, Generator, None)
  }, None)
}
End

Def Room() {
  Reset {"floor" "room_floor"}
  Margins(-1,
    Set { "room_wall" },
    Corners(Set {"no_dig"}, 1)
  )
}
End

Def DungeonRooms()
  Inside(1, {
    Place {
      {
        minSize = {2 2}
        maxSize = {6 6}
        generator = Room()
        count = {7 11}
        minSpacing = 1
      }
    }
  })
End

Def Dungeon1() {
  Set { "rock" }
  DungeonRooms()
  Connector()
  DungeonContent()
}
End

Def Dungeon2() {
  Set { "rock" }
  CellularAutomaton(Reset { "floor" "room_floor" }, 0.55)
  Connect(On "floor", {
    5 On "rock" Reset {"floor"}
  })
  DungeonContent()
}
End

Def Caverns(Generator)
  Place {
    {
      generator = {
        CellularAutomaton(Generator, 0.55)
      }
      count = {2 6}
      minSize = {10 10}
      maxSize = {14 14}
    }
  }
End

Def Dungeon3() {
  Set { "rock" }
  Caverns(Reset{"floor"})
  DungeonRooms()
  Connector()
  DungeonContent()
}
End

Def Dungeon4(WaterType) {
  Set { "rock" }
  Caverns(Reset{"floor"})
  DungeonRooms()
  Caverns(Reset{WaterType})
  Connector()
  DungeonContent()
}
End

Def AdoxieTemple() {
  Set { "rock" }
  HRatio(0.5,
    Inside(1,
      Place {
        {
          minSize = {2 2}
          maxSize = {6 6}
          generator = {
            Room()
            Place {{ {1 1} Set { "clear_middle" "up_stairs0" } 1 True MIDDLE }}
          }
          count = 1
          minSpacing = 1
        }
      }
    ),
    {
      CellularAutomaton(Set { "lava" }, 0.55)
      Place {{ 
        {7 7}
        {
          Inside(1, {
            Reset { "floor" "temple" }
            Corners(Set { "castle_wall" }, 1)
            Place {{ {1 1} Set { "clear_middle" "down_stairs0" } 1 True MIDDLE }}
          })
          Set { "no_dig" }
          Place {{ {1 1} Remove { "no_dig" } 1 True MIDDLE_V }}
          Place {{ {1 1} Remove { "no_dig" } 1 True MIDDLE_H }}
        }
        1
        On "lava"
        }}
    }
  )
  Connector()
  Filter(Not On "temple", Set { "no_territory" })
}
End

"adoxie_temple" AdoxieTemple()
"dungeon1" Dungeon1()
"dungeon2" Dungeon2()
"dungeon3" Dungeon3()
"dungeon4" Dungeon4("water")
"dungeon"
  Choose {
    Dungeon1()
    Dungeon2()
    Dungeon3()
    Dungeon4("lava")
    Dungeon4("water")
  }
