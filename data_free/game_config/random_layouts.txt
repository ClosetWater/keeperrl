Def AnyWall() Or { On "wood_wall" On "castle_wall" } End
Def AnyFloor() And {Not AnyWall() Or { On "stone_floor" On "wood_floor" On "floor" }} End
Def AnyDoor() Or { On "wood_door" On "iron_door" } End
Def AnyWater() Or { On "lava" On "water" } End

Def Building(WallType, FloorType) {
  Margins 1
    Set { FloorType WallType }
    Reset { FloorType }
}
End

Def NextTo(Pred)
  Area { 1 Pred }
End

Def Connector()
  Connect AnyFloor()
  {
    1000 And { Not AnyWater() Not AnyFloor() On "no_dig" } None
    10 And {On "wood_wall" Not On "no_dig"} { Remove { "wood_wall" } Set { "clear_middle" "wood_door" }}
    10 And {On "castle_wall" Not On "no_dig"} { Remove { "castle_wall" } Set { "clear_middle" "iron_door" }}
    8 On "lava" Set { "stone_bridge" }
    8 On "water" Set { "wood_bridge" }
    4 And { Not AnyWall() Not AnyWater() Not AnyFloor() Not On "no_dig" On "room_wall" }
        Filter { And { Chance 0.4 Not NextTo(On "wood_door")} Reset {"wood_door"} Reset {"floor"} }
    2 And { Not AnyWall() Not AnyFloor() On "rock" Not On "no_dig" Not On "room_wall" } Reset {"floor"}
  }
End

Def CellularAutomaton(Generator, BeginProb) Margins 1 None {
  Filter { Chance BeginProb Set { "cell_added" } }
  Repeat 4 {
    Filter { Area { 1 On "cell_added" 5 } Set { "cell_added2" }}
    Filter { On "cell_added2" Set { "cell_added" } Remove { "cell_added" }}
    Remove { "cell_added2" }
  }
  Filter { On "cell_added" Generator}
  Remove { "cell_added" }
}
End

Def Village1() {
  Place {
    {
      minSize = { 5 6 }
      maxSize = { 8 9 }
      generator = {
        Building("castle_wall", "stone_floor")
        Filter { AnyFloor() Set { "main_building" } }
      }
      position = MIDDLE
      minSpacing = 1
    }
    {
      minSize = {3 3}
      maxSize = {6 6}
      generator = Building("wood_wall", "floor")
      count = 3
      minSpacing = 1
    }
  }
  Connector()
  Place {
    { {1 1} Set { "bed" } {2 4} And {On "main_building" NextTo(AnyWall()) Not NextTo(AnyDoor()) } }
    { {1 1} Set { "stockpile" } {1 3} And {On "main_building" NextTo(AnyWall()) Not NextTo(AnyDoor()) } }
  }
  Place { { {1 1} Set { "dining_table" } 1 And {On "main_building" Not NextTo(AnyWall()) } } }
}
End

Def Village2() {
  Place {
    {
      size = {6 9}
      generator = {
        Building("castle_wall", "stone_floor")
        Margins 1 None VRatio 0.6
          Margin BOTTOM 1 Set { "castle_wall" } Set { "first_room" }
          Set { "second_room" }
      }
      position = MIDDLE
      minSpacing = 1
    }
    {
      minSize = {4 4}
      maxSize = {6 6}
      generator = Building("wood_wall", "floor")
      count = 1
      minSpacing = 1
    }
  }
  Connector()
  Place {
    { {1 1} Set { "bed" } {2 4} And {On "first_room" NextTo(AnyWall()) Not NextTo(AnyDoor()) } }
    { {1 1} Set { "stockpile" } {1 3} And {On "first_room" NextTo(AnyWall()) Not NextTo(AnyDoor()) } }
  }
  Place { { {1 1} Set { "dining_table" } 1 And {On "second_room" Not NextTo(AnyWall()) } } }
}
End

"village" Choose {
  Village1()
  Village2()
}

"village1" Village1()
"village2" Village2()

Def GuardPost() {
  Place {
    {
      size = {5 7}
      generator = {
        Building("castle_wall", "wood_floor")
        Margins 1 None VRatio 0.6
          Margin BOTTOM 1 {
            Set { "castle_wall" }
            Place { { {1 1} Set { "wood_door" } 1  } }
          }
          {
            Set { "first_room" }
            Margins -1 Set { "no_dig" } None
          }
          Set { "second_room" }
      }
      position = MIDDLE
      minSpacing = 1
    }
    {
      minSize = {4 4}
      maxSize = {6 6}
      generator = Building("wood_wall", "floor")
      count = 1
      minSpacing = 1
    }
  }
  Place {
    {{1 1} Set {"up_stairs0"} 1 And { On "first_room" AnyFloor() }}
    {{1 1} Set {"dining_table"} 1 And { On "first_room" AnyFloor() }}
    {{1 1} Set {"torch"} 1 And { On "first_room" AnyFloor() }}
  }
  Connector()
}
End

Def GuardPostFloor2() {
  Building("castle_wall", "wood_floor")
  Place {
    {{1 1} Set {"down_stairs0"} 1 And { AnyFloor() NextTo(AnyWall())} }
    {{1 1} Set {"up_stairs0"} 1 And { AnyFloor() NextTo(AnyWall())} }
    {{1 1} Set {"armor_chest"} {3 6} And { AnyFloor() NextTo(AnyWall())} }
    {{1 1} Set {"bed"} 2 And { AnyFloor() NextTo(AnyWall())} }
    {{1 1} Set {"torch"} 1 And { AnyFloor() NextTo(AnyWall())} }
  }
}
End

Def GuardPostFloor3() {
  Building("wood_wall", "wood_floor")
  Place {
    {{1 1} Set {"down_stairs0"} 1 And { AnyFloor() NextTo(AnyWall())} }
    {{1 1} Set {"pamphlet_chest"} {2 4} And { AnyFloor() NextTo(AnyWall())} }
  }
}
End

"guard_post" GuardPost()
"guard_post_floor2" GuardPostFloor2()
"guard_post_floor3" GuardPostFloor3()

Def DungeonContent()
  Place {
    {
      size = {1 1}
      generator = Set {"monster"}
      count = 4
        predicate = On "room_floor"
    }
    {{1 1} Set {"up_stairs0"} 1 On "room_floor"}
    {{1 1} Set {"down_stairs0"} 1 On "room_floor"}
    {{1 1} Set {"up_stairs1"} 1 On "room_floor"}
    {{1 1} Set {"down_stairs1"} 1 On "room_floor"}
    {{1 1} Set {"inside_furniture"} 10 On "room_floor"}
  }
End

Def Corners(Generator) {
  Margin BOTTOM 1 Set { "h_margin" } None
  Margin TOP 1 Set { "h_margin" } None
  Margin RIGHT 1 Set { "v_margin" } None
  Margin LEFT 1 Set { "v_margin" } None
  Filter { And { On "h_margin" On "v_margin" } Generator }
  Remove { "h_margin" "v_margin" }
}
End

Def Room() {
  Reset {"floor" "room_floor"}
  Margins -1
    Set { "room_wall" }
    Corners(Set {"no_dig"})
}
End

Def DungeonRooms()
  Margins 1 None {
    Place {
      {
        minSize = {2 2}
        maxSize = {6 6}
        generator = Room()
        count = {7 11}
        minSpacing = 1
      }
    }
  }
End

Def Dungeon1() {
  Set { "rock" }
  DungeonRooms()
  Connector()
  DungeonContent()
}
End

Def Dungeon2() {
  Set { "rock" }
  CellularAutomaton(Reset { "floor" "room_floor" }, 0.55)
  Connect On "floor"
  {
    5 On "rock" Reset {"floor"}
  }
  DungeonContent()
}
End

Def Caverns(Generator)
  Place {
    {
      generator = {
        CellularAutomaton(Generator, 0.55)
      }
      count = {2 6}
      minSize = {10 10}
      maxSize = {14 14}
    }
  }
End

Def Dungeon3() {
  Set { "rock" }
  Caverns(Reset{"floor"})
  DungeonRooms()
  Connector()
  DungeonContent()
}
End

Def Dungeon4(WaterType) {
  Set { "rock" }
  Caverns(Reset{"floor"})
  DungeonRooms()
  Caverns(Reset{WaterType})
  Connector()
  DungeonContent()
}
End

"dungeon1" Dungeon1()
"dungeon2" Dungeon2()
"dungeon3" Dungeon3()
"dungeon4" Dungeon4("water")
"dungeon" Choose {
  Dungeon1()
  Dungeon2()
  Dungeon3()
  Dungeon4("lava")
  Dungeon4("water")
}
