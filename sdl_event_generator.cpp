#include "stdafx.h"
#include "sdl.h"
#include "sdl_event_generator.h"

static vector<SDL::SDL_Keycode> syms {
  SDL::SDLK_UNKNOWN,
  SDL::SDLK_RETURN,
  SDL::SDLK_ESCAPE,
  SDL::SDLK_BACKSPACE,
  SDL::SDLK_TAB,
  SDL::SDLK_SPACE,
  SDL::SDLK_EXCLAIM,
  SDL::SDLK_QUOTEDBL,
  SDL::SDLK_HASH,
  SDL::SDLK_PERCENT,
  SDL::SDLK_DOLLAR,
  SDL::SDLK_AMPERSAND,
  SDL::SDLK_QUOTE,
  SDL::SDLK_LEFTPAREN,
  SDL::SDLK_RIGHTPAREN,
  SDL::SDLK_ASTERISK,
  SDL::SDLK_PLUS,
  SDL::SDLK_COMMA,
  SDL::SDLK_MINUS,
  SDL::SDLK_PERIOD,
  SDL::SDLK_SLASH,
  SDL::SDLK_0,
  SDL::SDLK_1,
  SDL::SDLK_2,
  SDL::SDLK_3,
  SDL::SDLK_4,
  SDL::SDLK_5,
  SDL::SDLK_6,
  SDL::SDLK_7,
  SDL::SDLK_8,
  SDL::SDLK_9,
  SDL::SDLK_COLON,
  SDL::SDLK_SEMICOLON,
  SDL::SDLK_LESS,
  SDL::SDLK_EQUALS,
  SDL::SDLK_GREATER,
  SDL::SDLK_QUESTION,
  SDL::SDLK_AT,
  SDL::SDLK_LEFTBRACKET,
  SDL::SDLK_BACKSLASH,
  SDL::SDLK_RIGHTBRACKET,
  SDL::SDLK_CARET,
  SDL::SDLK_UNDERSCORE,
  SDL::SDLK_BACKQUOTE,
  SDL::SDLK_a,
  SDL::SDLK_b,
  SDL::SDLK_c,
  SDL::SDLK_d,
  SDL::SDLK_e,
  SDL::SDLK_f,
  SDL::SDLK_g,
  SDL::SDLK_h,
  SDL::SDLK_i,
  SDL::SDLK_j,
  SDL::SDLK_k,
  SDL::SDLK_l,
  SDL::SDLK_m,
  SDL::SDLK_n,
  SDL::SDLK_o,
  SDL::SDLK_p,
  SDL::SDLK_q,
  SDL::SDLK_r,
  SDL::SDLK_s,
  SDL::SDLK_t,
  SDL::SDLK_u,
  SDL::SDLK_v,
  SDL::SDLK_w,
  SDL::SDLK_x,
  SDL::SDLK_y,
  SDL::SDLK_z,
  SDL::SDLK_CAPSLOCK,
  SDL::SDLK_F1,
  SDL::SDLK_F2,
  SDL::SDLK_F3,
  SDL::SDLK_F4,
  SDL::SDLK_F5,
  SDL::SDLK_F6,
  SDL::SDLK_F7,
  SDL::SDLK_F8,
  SDL::SDLK_F9,
  SDL::SDLK_F10,
  SDL::SDLK_F11,
  SDL::SDLK_F12,
  SDL::SDLK_PRINTSCREEN,
  SDL::SDLK_SCROLLLOCK,
  SDL::SDLK_PAUSE,
  SDL::SDLK_INSERT,
  SDL::SDLK_HOME,
  SDL::SDLK_PAGEUP,
  SDL::SDLK_DELETE,
  SDL::SDLK_END,
  SDL::SDLK_PAGEDOWN,
  SDL::SDLK_RIGHT,
  SDL::SDLK_LEFT,
  SDL::SDLK_DOWN,
  SDL::SDLK_UP,
  SDL::SDLK_NUMLOCKCLEAR,
  SDL::SDLK_KP_DIVIDE,
  SDL::SDLK_KP_MULTIPLY,
  SDL::SDLK_KP_MINUS,
  SDL::SDLK_KP_PLUS,
  SDL::SDLK_KP_ENTER,
  SDL::SDLK_KP_1,
  SDL::SDLK_KP_2,
  SDL::SDLK_KP_3,
  SDL::SDLK_KP_4,
  SDL::SDLK_KP_5,
  SDL::SDLK_KP_6,
  SDL::SDLK_KP_7,
  SDL::SDLK_KP_8,
  SDL::SDLK_KP_9,
  SDL::SDLK_KP_0,
  SDL::SDLK_KP_PERIOD,
  SDL::SDLK_APPLICATION,
  SDL::SDLK_POWER,
  SDL::SDLK_KP_EQUALS,
  SDL::SDLK_F13,
  SDL::SDLK_F14,
  SDL::SDLK_F15,
  SDL::SDLK_F16,
  SDL::SDLK_F17,
  SDL::SDLK_F18,
  SDL::SDLK_F19,
  SDL::SDLK_F20,
  SDL::SDLK_F21,
  SDL::SDLK_F22,
  SDL::SDLK_F23,
  SDL::SDLK_F24,
  SDL::SDLK_EXECUTE,
  SDL::SDLK_HELP,
  SDL::SDLK_MENU,
  SDL::SDLK_SELECT,
  SDL::SDLK_STOP,
  SDL::SDLK_AGAIN,
  SDL::SDLK_UNDO,
  SDL::SDLK_CUT,
  SDL::SDLK_COPY,
  SDL::SDLK_PASTE,
  SDL::SDLK_FIND,
  SDL::SDLK_MUTE,
  SDL::SDLK_VOLUMEUP,
  SDL::SDLK_VOLUMEDOWN,
  SDL::SDLK_KP_COMMA,
  SDL::SDLK_KP_EQUALSAS400,
  SDL::SDLK_ALTERASE,
  SDL::SDLK_SYSREQ,
  SDL::SDLK_CANCEL,
  SDL::SDLK_CLEAR,
  SDL::SDLK_PRIOR,
  SDL::SDLK_RETURN2,
  SDL::SDLK_SEPARATOR,
  SDL::SDLK_OUT,
  SDL::SDLK_OPER,
  SDL::SDLK_CLEARAGAIN,
  SDL::SDLK_CRSEL,
  SDL::SDLK_EXSEL,
  SDL::SDLK_KP_00,
  SDL::SDLK_KP_000,
  SDL::SDLK_THOUSANDSSEPARATOR,
  SDL::SDLK_DECIMALSEPARATOR,
  SDL::SDLK_CURRENCYUNIT,
  SDL::SDLK_CURRENCYSUBUNIT,
  SDL::SDLK_KP_LEFTPAREN,
  SDL::SDLK_KP_RIGHTPAREN,
  SDL::SDLK_KP_LEFTBRACE,
  SDL::SDLK_KP_RIGHTBRACE,
  SDL::SDLK_KP_TAB,
  SDL::SDLK_KP_BACKSPACE,
  SDL::SDLK_KP_A,
  SDL::SDLK_KP_B,
  SDL::SDLK_KP_C,
  SDL::SDLK_KP_D,
  SDL::SDLK_KP_E,
  SDL::SDLK_KP_F,
  SDL::SDLK_KP_XOR,
  SDL::SDLK_KP_POWER,
  SDL::SDLK_KP_PERCENT,
  SDL::SDLK_KP_LESS,
  SDL::SDLK_KP_GREATER,
  SDL::SDLK_KP_AMPERSAND,
  SDL::SDLK_KP_DBLAMPERSAND,
  SDL::SDLK_KP_VERTICALBAR,
  SDL::SDLK_KP_DBLVERTICALBAR,
  SDL::SDLK_KP_COLON,
  SDL::SDLK_KP_HASH,
  SDL::SDLK_KP_SPACE,
  SDL::SDLK_KP_AT,
  SDL::SDLK_KP_EXCLAM,
  SDL::SDLK_KP_MEMSTORE,
  SDL::SDLK_KP_MEMRECALL,
  SDL::SDLK_KP_MEMCLEAR,
  SDL::SDLK_KP_MEMADD,
  SDL::SDLK_KP_MEMSUBTRACT,
  SDL::SDLK_KP_MEMMULTIPLY,
  SDL::SDLK_KP_MEMDIVIDE,
  SDL::SDLK_KP_PLUSMINUS,
  SDL::SDLK_KP_CLEAR,
  SDL::SDLK_KP_CLEARENTRY,
  SDL::SDLK_KP_BINARY,
  SDL::SDLK_KP_OCTAL,
  SDL::SDLK_KP_DECIMAL,
  SDL::SDLK_KP_HEXADECIMAL,
  SDL::SDLK_LCTRL,
  SDL::SDLK_LSHIFT,
  SDL::SDLK_LALT,
  SDL::SDLK_LGUI,
  SDL::SDLK_RCTRL,
  SDL::SDLK_RSHIFT,
  SDL::SDLK_RALT,
  SDL::SDLK_RGUI,
  SDL::SDLK_MODE,
  SDL::SDLK_AUDIONEXT,
  SDL::SDLK_AUDIOPREV,
  SDL::SDLK_AUDIOSTOP,
  SDL::SDLK_AUDIOPLAY,
  SDL::SDLK_AUDIOMUTE,
  SDL::SDLK_MEDIASELECT,
  SDL::SDLK_WWW,
  SDL::SDLK_MAIL,
  SDL::SDLK_CALCULATOR,
  SDL::SDLK_COMPUTER,
  SDL::SDLK_AC_SEARCH,
  SDL::SDLK_AC_HOME,
  SDL::SDLK_AC_BACK,
  SDL::SDLK_AC_FORWARD,
  SDL::SDLK_AC_STOP,
  SDL::SDLK_AC_REFRESH,
  SDL::SDLK_AC_BOOKMARKS,
  SDL::SDLK_BRIGHTNESSDOWN,
  SDL::SDLK_BRIGHTNESSUP,
  SDL::SDLK_DISPLAYSWITCH,
  SDL::SDLK_KBDILLUMTOGGLE,
  SDL::SDLK_KBDILLUMDOWN,
  SDL::SDLK_KBDILLUMUP,
  SDL::SDLK_EJECT,
  SDL::SDLK_SLEEP
};

SDL::SDL_Event SdlEventGenerator::getRandom(RandomGen& random, Vec2 screenSize) {
  SDL::SDL_Event ret;
  ret.type = random.choose(
      SDL::SDL_KEYDOWN,
      SDL::SDL_MOUSEBUTTONDOWN,
      SDL::SDL_MOUSEBUTTONUP,
      SDL::SDL_MOUSEWHEEL,
      SDL::SDL_MOUSEMOTION
  );
  int modProb = 5;
  switch (ret.type) {
    case SDL::SDL_KEYDOWN:
      ret.key = SDL::SDL_KeyboardEvent {ret.type, 0, 0, SDL_PRESSED, random.roll(modProb), 0, 0,
          SDL::SDL_Keysym {(SDL::SDL_Scancode) random.get(SDL::SDL_NUM_SCANCODES), random.choose(syms),
              (SDL::Uint16) random.choose(SDL::KMOD_LSHIFT, SDL::KMOD_RSHIFT, SDL::KMOD_LCTRL, SDL::KMOD_RCTRL,
                  SDL::KMOD_LALT, SDL::KMOD_RALT), 0}};
      break;
    case SDL::SDL_MOUSEBUTTONDOWN:
      ret.button = SDL::SDL_MouseButtonEvent {ret.type, 0, 0, 0,
          (SDL::Uint8) random.choose(SDL_BUTTON_RIGHT, SDL_BUTTON_LEFT, SDL_BUTTON_MIDDLE),
          SDL_PRESSED, 1, 0, random.get(screenSize.x), random.get(screenSize.y)};
      break;
    case SDL::SDL_MOUSEBUTTONUP:
      ret.button = SDL::SDL_MouseButtonEvent {ret.type, 0, 0, 0,
          (SDL::Uint8) random.choose(SDL_BUTTON_RIGHT, SDL_BUTTON_LEFT, SDL_BUTTON_MIDDLE),
          SDL_RELEASED, 1, 0, random.get(screenSize.x), random.get(screenSize.y)};
      break;
    case SDL::SDL_MOUSEMOTION:
      ret.motion = SDL::SDL_MouseMotionEvent { ret.type, 0, 0, 0, 0, random.get(screenSize.x), random.get(screenSize.y),
          0, 0};
      break;
    case SDL::SDL_MOUSEWHEEL:
      ret.wheel = SDL::SDL_MouseWheelEvent {ret.type, 0, 0, 0, 0, random.choose(-1, 1), SDL::SDL_MOUSEWHEEL_NORMAL};
  }
  return ret;
}
